class Solution {
public:
    vector<int> columns; 
    vector<vector<string>> ans;
    
    bool isComplete(int j, int n) {
        return j == n;
    }

    bool isEmptyColumn(int y) {
        return columns[y] == 0;
    }

    bool attack(int x, int y, vector<vector<int>>& arr) {
        int a = x;
        int b = y;
       
        while (a >= 0) {
            if (arr[a][b] == 1)
                return false;
            --a;
        }
       
        a = x;
        b = y;
        while (a >= 0 && b >= 0) {
            if (arr[a][b] == 1)
                return false;
            --a;
            --b;
        }
       
        a = x;
        b = y;
        while (a >= 0 && b < arr.size()) {
            if (arr[a][b] == 1)
                return false;
            --a;
            ++b;
        }
        return true;
    }

    void func(vector<vector<int>>& arr, int n, int x) {
        if (x == n) {
            vector<string> board;
            for (int i = 0; i < n; ++i) {
                string row = "";
                for (int j = 0; j < n; ++j) {
                    if (arr[i][j] == 1) {
                        row += "Q";
                    } else {
                        row += ".";
                    }
                }
                board.push_back(row);
            }
            ans.push_back(board);
            return;
        }

        for (int i = 0; i < n; i++) {
            if (isEmptyColumn(i) && attack(x, i, arr)) {
                arr[x][i] = 1;
                columns[i] = 1;
                func(arr, n, x + 1);
                arr[x][i] = 0;
                columns[i] = 0; 
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<int>> arr(n, vector<int>(n, 0));
        columns = vector<int>(n, 0); 
        func(arr, n, 0);
        return ans;
    }
};
