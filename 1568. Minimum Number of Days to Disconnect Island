class Solution {
public:
    int m, n, dirs[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};
    void dfs(vector<vector<int>> &grid, int i, int j, vector<vector<int>> &vis) {
        vis[i][j] = true;
        for (auto &[dx, dy] : dirs) {
            int x = dx + i;
            int y = dy + j;
            if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] != 1 || vis[x][y]) 
                continue;
            dfs(grid, x, y, vis);
        }
    }

    bool disconnected(vector<vector<int>> &grid) {
        vector<vector<int>> vis(m, vector<int>(n, false));
        int count = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] != 1 || vis[i][j]) 
                    continue;
                if (++count > 1) 
                    return true;
                dfs(grid, i, j, vis);
            }
        }
        return count == 0;
    }

    int minDays(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        if (disconnected(grid)) 
            return 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] != 1) 
                    continue;
                grid[i][j] = 0;
                if (disconnected(grid)) 
                    return 1;
                grid[i][j] = 1;
            }
        }
        return 2;
    }
};
