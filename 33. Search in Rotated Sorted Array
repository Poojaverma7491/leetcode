int fpivot(vector<int>& nums){
    int start=0;
    int end=nums.size()-1;
    int mid=start+(end-start)/2;
    while(start<end){
        if(nums[mid]>=nums[0]){
            start=mid+1;
            }
        else{
            end=mid;
        }
        mid=start+(end-start)/2;
    }
    return start;
}    

int bsearch(vector<int>& nums, int start, int end, int target) {
    int mid=start+(end-start)/2;
    while(start<=end){
        if(nums[mid]==target){
            return mid;
        }
        else if(nums[mid]<target){
            start=mid+1;
        }
        else{
            end=mid-1;
        }
        mid=start+(end-start)/2;
    }
    return -1;
}
class Solution {
    public:
        int search(vector<int>& nums, int target) {
            int pivot=fpivot(nums);
            if(target>=nums[pivot] && target<=nums[nums.size()-1]){
                return bsearch(nums, pivot, nums.size()-1, target);
            }
            else{
                return bsearch(nums, 0, pivot-1, target);
            }
        }
            
    };
