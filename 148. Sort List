/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private: 
    ListNode* findMid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head->next;
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
private:
    ListNode* merge(ListNode* first, ListNode* second){
        if(first == NULL)
            return second;
        if(second == NULL)
            return first;
        ListNode* res = new ListNode(-1);
        ListNode* temp = res;
        while(first != NULL && second != NULL){
            if(first->val < second->val){
                temp->next = first;
                temp = first;
                first = first->next;
            }
            else{
                temp->next = second;
                temp = second;
                second = second->next;
            }
        }       
        while(first != NULL){
            temp->next = first;
            temp = first;
            first = first->next;
        }
        while(second != NULL){
            temp->next = second;
            temp = second;
            second = second->next;
        }
        res = res->next;
        return res;
    }
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next == NULL){
            return head;
        }
        ListNode* mid = findMid(head);
        ListNode* first = head;
        ListNode* second = mid->next;
        mid->next = NULL; 
        first = sortList(first);
        second = sortList(second);
        ListNode* result = merge(first, second);
        return result;
    }
};
