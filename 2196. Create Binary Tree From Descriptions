/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_map<int, TreeNode*> mp;
        unordered_set<int> st;
        for(int i = 0; i < descriptions.size(); i++){
            if(mp.find(descriptions[i][0]) == mp.end()){
                mp[descriptions[i][0]] = new TreeNode(descriptions[i][0]);
            }
            if(mp.find(descriptions[i][1]) == mp.end()){
                mp[descriptions[i][1]] = new TreeNode(descriptions[i][1]);
            }
            st.insert(descriptions[i][1]);
            TreeNode* parent = mp[descriptions[i][0]];
            TreeNode* child = mp[descriptions[i][1]];
            descriptions[i][2] == 1 ? parent->left = child : parent->right = child;
        }
        for(int i = 0; i < descriptions.size(); i++){
            if(st.find(descriptions[i][0]) == st.end()){
                return mp[descriptions[i][0]];
            }
        }
        return NULL;
    }
};
